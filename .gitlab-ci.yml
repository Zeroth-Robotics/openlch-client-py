image: python:3.10

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  DOCS_IMAGE: $CI_REGISTRY_IMAGE/docs:$CI_COMMIT_TAG

cache:
  paths:
    - .pip-cache/

stages:
  - build_docs
  - build_docker
  - publish

build_docs:
  stage: build_docs
  only:
    - tags
  script:
    - cd openlch
    - pip install --upgrade pip
    - pip install pdoc
    - pip install -r requirements.txt
    - cd ..
    - pdoc openlch -o docs
  artifacts:
    paths:
      - docs/

build_docker:
  stage: build_docker
  image: docker:latest
  services:
    - docker:dind
  only:
    - tags
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - |
      cat <<EOF > nginx.conf
      user  nginx;
      worker_processes  auto;
      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;
      events {
          worker_connections  1024;
      }
      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                            '\$status \$body_bytes_sent "\$http_referer" '
                            '"\$http_user_agent" "\$http_x_forwarded_for"';
          access_log  /var/log/nginx/access.log  main;
          sendfile        on;
          keepalive_timeout  65;
          server {
              listen       80;
              server_name  localhost;
              location /python {
                  root   /usr/share/nginx/html;
                  index  index.html index.htm;
                  try_files \$uri \$uri/ /python/index.html;
              }
              error_page   500 502 503 504  /50x.html;
              location = /50x.html {
                  root   /usr/share/nginx/html;
              }
          }
      }
      EOF
    - |
      cat <<EOF > Dockerfile
      FROM nginx:alpine
      COPY docs /usr/share/nginx/html/python
      COPY nginx.conf /etc/nginx/nginx.conf
      EOF
    - docker build --pull -t $DOCS_IMAGE .
    - docker push $DOCS_IMAGE

publish:
  stage: publish
  only:
    - tags
  script:
    - pip install --upgrade pip
    - pip install build wheel
    - python -m build --sdist --wheel --outdir dist/ .
    - pip install twine
    - TWINE_PASSWORD=${PYPI_API_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
  artifacts:
    paths:
      - dist/*
